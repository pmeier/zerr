// DO NOT EDIT: this file is autogenerated. To regenerate invoke
// go generate ./gen
// in the project root

package zerr

import (
	"context"
	"fmt"
	"github.com/rs/zerolog"
	"net"
	"time"
)

func (z *Zerr) Any(k string, v interface{}) *Zerr {
	z.e.Any(k, v)
	return z
}
func (z *Zerr) Array(k string, v zerolog.LogArrayMarshaler) *Zerr {
	z.e.Array(k, v)
	return z
}
func (z *Zerr) Bool(k string, v bool) *Zerr {
	z.e.Bool(k, v)
	return z
}
func (z *Zerr) Bools(k string, v []bool) *Zerr {
	z.e.Bools(k, v)
	return z
}
func (z *Zerr) Bytes(k string, v []uint8) *Zerr {
	z.e.Bytes(k, v)
	return z
}
func (z *Zerr) Caller(v ...int) *Zerr {
	z.e.Caller(v...)
	return z
}
func (z *Zerr) CallerSkipFrame(v int) *Zerr {
	z.e.CallerSkipFrame(v)
	return z
}
func (z *Zerr) Ctx(v context.Context) *Zerr {
	z.e.Ctx(v)
	return z
}
func (z *Zerr) Dict(k string, v *zerolog.Event) *Zerr {
	z.e.Dict(k, v)
	return z
}
func (z *Zerr) Dur(k string, v time.Duration) *Zerr {
	z.e.Dur(k, v)
	return z
}
func (z *Zerr) Durs(k string, v []time.Duration) *Zerr {
	z.e.Durs(k, v)
	return z
}
func (z *Zerr) EmbedObject(v zerolog.LogObjectMarshaler) *Zerr {
	z.e.EmbedObject(v)
	return z
}
func (z *Zerr) Errs(k string, v []error) *Zerr {
	z.e.Errs(k, v)
	return z
}
func (z *Zerr) Fields(v interface{}) *Zerr {
	z.e.Fields(v)
	return z
}
func (z *Zerr) Float32(k string, v float32) *Zerr {
	z.e.Float32(k, v)
	return z
}
func (z *Zerr) Float64(k string, v float64) *Zerr {
	z.e.Float64(k, v)
	return z
}
func (z *Zerr) Floats32(k string, v []float32) *Zerr {
	z.e.Floats32(k, v)
	return z
}
func (z *Zerr) Floats64(k string, v []float64) *Zerr {
	z.e.Floats64(k, v)
	return z
}
func (z *Zerr) Func(v func(*zerolog.Event)) *Zerr {
	z.e.Func(v)
	return z
}
func (z *Zerr) Hex(k string, v []uint8) *Zerr {
	z.e.Hex(k, v)
	return z
}
func (z *Zerr) IPAddr(k string, v net.IP) *Zerr {
	z.e.IPAddr(k, v)
	return z
}
func (z *Zerr) IPPrefix(k string, v net.IPNet) *Zerr {
	z.e.IPPrefix(k, v)
	return z
}
func (z *Zerr) Int(k string, v int) *Zerr {
	z.e.Int(k, v)
	return z
}
func (z *Zerr) Int16(k string, v int16) *Zerr {
	z.e.Int16(k, v)
	return z
}
func (z *Zerr) Int32(k string, v int32) *Zerr {
	z.e.Int32(k, v)
	return z
}
func (z *Zerr) Int64(k string, v int64) *Zerr {
	z.e.Int64(k, v)
	return z
}
func (z *Zerr) Int8(k string, v int8) *Zerr {
	z.e.Int8(k, v)
	return z
}
func (z *Zerr) Interface(k string, v interface{}) *Zerr {
	z.e.Interface(k, v)
	return z
}
func (z *Zerr) Ints(k string, v []int) *Zerr {
	z.e.Ints(k, v)
	return z
}
func (z *Zerr) Ints16(k string, v []int16) *Zerr {
	z.e.Ints16(k, v)
	return z
}
func (z *Zerr) Ints32(k string, v []int32) *Zerr {
	z.e.Ints32(k, v)
	return z
}
func (z *Zerr) Ints64(k string, v []int64) *Zerr {
	z.e.Ints64(k, v)
	return z
}
func (z *Zerr) Ints8(k string, v []int8) *Zerr {
	z.e.Ints8(k, v)
	return z
}
func (z *Zerr) MACAddr(k string, v net.HardwareAddr) *Zerr {
	z.e.MACAddr(k, v)
	return z
}
func (z *Zerr) Object(k string, v zerolog.LogObjectMarshaler) *Zerr {
	z.e.Object(k, v)
	return z
}
func (z *Zerr) RawCBOR(k string, v []uint8) *Zerr {
	z.e.RawCBOR(k, v)
	return z
}
func (z *Zerr) RawJSON(k string, v []uint8) *Zerr {
	z.e.RawJSON(k, v)
	return z
}
func (z *Zerr) Stack() *Zerr {
	z.e.Stack()
	return z
}
func (z *Zerr) Str(k string, v string) *Zerr {
	z.e.Str(k, v)
	return z
}
func (z *Zerr) Stringer(k string, v fmt.Stringer) *Zerr {
	z.e.Stringer(k, v)
	return z
}
func (z *Zerr) Stringers(k string, v []fmt.Stringer) *Zerr {
	z.e.Stringers(k, v)
	return z
}
func (z *Zerr) Strs(k string, v []string) *Zerr {
	z.e.Strs(k, v)
	return z
}
func (z *Zerr) Time(k string, v time.Time) *Zerr {
	z.e.Time(k, v)
	return z
}
func (z *Zerr) TimeDiff(k string, v1 time.Time, v2 time.Time) *Zerr {
	z.e.TimeDiff(k, v1, v2)
	return z
}
func (z *Zerr) Times(k string, v []time.Time) *Zerr {
	z.e.Times(k, v)
	return z
}
func (z *Zerr) Timestamp() *Zerr {
	z.e.Timestamp()
	return z
}
func (z *Zerr) Type(k string, v interface{}) *Zerr {
	z.e.Type(k, v)
	return z
}
func (z *Zerr) Uint(k string, v uint) *Zerr {
	z.e.Uint(k, v)
	return z
}
func (z *Zerr) Uint16(k string, v uint16) *Zerr {
	z.e.Uint16(k, v)
	return z
}
func (z *Zerr) Uint32(k string, v uint32) *Zerr {
	z.e.Uint32(k, v)
	return z
}
func (z *Zerr) Uint64(k string, v uint64) *Zerr {
	z.e.Uint64(k, v)
	return z
}
func (z *Zerr) Uint8(k string, v uint8) *Zerr {
	z.e.Uint8(k, v)
	return z
}
func (z *Zerr) Uints(k string, v []uint) *Zerr {
	z.e.Uints(k, v)
	return z
}
func (z *Zerr) Uints16(k string, v []uint16) *Zerr {
	z.e.Uints16(k, v)
	return z
}
func (z *Zerr) Uints32(k string, v []uint32) *Zerr {
	z.e.Uints32(k, v)
	return z
}
func (z *Zerr) Uints64(k string, v []uint64) *Zerr {
	z.e.Uints64(k, v)
	return z
}
func (z *Zerr) Uints8(k string, v []uint8) *Zerr {
	z.e.Uints8(k, v)
	return z
}
